// Erstelle Kontext anhand der Sprache, wenn Sie vorhanden ist ansonsten füge dort Ressourcen ein.

function createOrUpdateContext($modx, $languageFile) {
    // Extrahiere die Sprache aus dem Dateinamen
    $languagePattern = '/-(\w{2})\.txt$/';
    preg_match($languagePattern, $languageFile, $matches);
    
    if (!$matches || empty($matches[1])) {
        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Fehler: Die Sprache konnte nicht aus dem Dateinamen extrahiert werden.');
        return;
    }

    $languageCode = strtoupper($matches[1]); // Die Sprache wird hier in Großbuchstaben konvertiert

    // Überprüfe, ob der Kontext bereits existiert
    $existingContext = $modx->getObject('modContext', array('key' => $languageCode));

    if (!$existingContext) {
        // Der Kontext existiert nicht, erstelle einen neuen Kontext
        $newContext = $modx->newObject('modContext');
        $newContext->set('key', $languageCode);
        $newContext->set('name', $languageCode); // Du kannst den Namen je nach Bedarf anpassen
        $newContext->save();

        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Neuer Kontext erfolgreich erstellt: ' . $languageCode);

        // Wenn der Kontext erstellt wurde, rufe die Funktion zum Kopieren der Ressourcen auf
        copyResourceToContext($modx, $newContext->get('id'));
    } else {
        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Der Kontext existiert bereits: ' . $languageCode);

        // Wenn der Kontext existiert, rufe die Funktion zum Kopieren der Ressourcen auf
        copyResourceToContext($modx, $existingContext->get('id'));
    }

    // Du kannst die ID des neuen oder vorhandenen Kontexts zurückgeben, wenn du sie weiterverwenden möchtest
    return $existingContext ? $existingContext->get('id') : $newContext->get('id');
}

// Erstelle Ressource des neues Kontextes anhand der gefundende ID mit den Vergleich 

function copyResourceToContext($modx, $resourceId, $sourceContextKey, $targetContextKey) {
    // Überprüfe, ob die Ressource bereits im Zielkontext existiert
    $existingResource = $modx->getObject('modResource', array('id' => $resourceId, 'context_key' => $targetContextKey));

    if (!$existingResource) {
        // Die Ressource existiert nicht im Zielkontext, erstelle eine Kopie
        $sourceResource = $modx->getObject('modResource', array('id' => $resourceId, 'context_key' => $sourceContextKey));

        if ($sourceResource) {
            // Erstelle eine Kopie der Ressource
            $newResource = $sourceResource->duplicate();

            // Setze den Kontext des neuen Ressourcenobjekts auf den Zielkontext
            $newResource->set('context_key', $targetContextKey);

            // Speichere die Änderungen
            $newResource->save();

            $modx->log(xPDO::LOG_LEVEL_ERROR, 'Ressource erfolgreich in den Zielkontext kopiert.');
        } else {
            $modx->log(xPDO::LOG_LEVEL_ERROR, 'Fehler: Die Quell-Ressource wurde nicht gefunden.');
        }
    } else {
        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Die Ressource existiert bereits im Zielkontext.');
    }
}

// Erstelle Kategorie anhand der Sprache, wenn Sie vorhanden ist, ansonsten nicht erstellen.

function createCategory($modx, $language) {
    $categoryName = 'DeineKategorieName'; // Hier den gewünschten Kategorienamen eintragen

    // Überprüfe, ob die Kategorie bereits existiert
    $existingCategory = $modx->getObject('modCategory', array('category' => $categoryName));

    if (!$existingCategory) {
        // Die Kategorie existiert nicht, erstelle eine neue Kategorie
        $newCategory = $modx->newObject('modCategory');
        $newCategory->set('category', $categoryName);
        $newCategory->set('parent', 0); // Setze den Elternwert nach Bedarf (0 bedeutet keine Elternkategorie)
        $newCategory->save();

        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Neue Kategorie erfolgreich erstellt: ' . $categoryName);

        // Du kannst die ID der neuen Kategorie zurückgeben, wenn du sie weiterverwenden möchtest
        return $newCategory->get('id');
    } else {
        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Die Kategorie existiert bereits: ' . $categoryName);

        // Du kannst die ID der vorhandenen Kategorie zurückgeben, wenn du sie weiterverwenden möchtest
        return $existingCategory->get('id');
    }
}

// Erstelle neue Chunks anhand der Sprache und verknüpfe Sie mit der Kategorie, wenn Sie vorhanden ist, ansonsten nicht erstellen.

function createChunkWithCategory($modx, $chunkName, $language) {
    // Überprüfe, ob die Kategorie bereits existiert oder erstelle sie
    $categoryId = createCategory($modx, $language);

    // Überprüfe, ob der Chunk bereits existiert
    $existingChunk = $modx->getObject('modChunk', array('name' => $chunkName));

    if (!$existingChunk) {
        // Der Chunk existiert nicht, erstelle einen neuen Chunk
        $newChunk = $modx->newObject('modChunk');
        $newChunk->set('name', $chunkName);
        $newChunk->set('category', $categoryId); // Verknüpfe den Chunk mit der Kategorie
        $newChunk->set('static', 1); // Setze nach Bedarf statischen oder dynamischen Chunk
        $newChunk->setContent('Hier kommt der Inhalt des Chunks.'); // Setze den Inhalt des Chunks nach Bedarf
        $newChunk->save();

        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Neuer Chunk erfolgreich erstellt: ' . $chunkName);

        // Du kannst die ID des neuen Chunks zurückgeben, wenn du sie weiterverwenden möchtest
        return $newChunk->get('id');
    } else {
        $modx->log(xPDO::LOG_LEVEL_ERROR, 'Der Chunk existiert bereits: ' . $chunkName);

        // Du kannst die ID des vorhandenen Chunks zurückgeben, wenn du sie weiterverwenden möchtest
        return $existingChunk->get('id');
    }
}

// Funktion der Einfügen des Textes zu der Ressource

// Funktion des Einfügens des Textes in den Template-Variable des Ressoruces 

// Funktion des Einfügen des Texten in den Chunks
